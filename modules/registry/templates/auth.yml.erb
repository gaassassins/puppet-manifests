# This config lists all the possible config options.
#

server:  # Server settings.
  # Address to listen on.
  addr: ":<%= @auth_backend_port %>"
  # TLS certificate and key for signing tokens.
  certificate: "<%= @ssl_certificate_token %>"
  key: "<%= @ssl_key_token %>"

token:  # Settings for the tokens.
  issuer: "<%= @service_fqdn %>"  # Must match issuer in the Registry config.
  expiration: <%= @expiration %>
  # It is possible configure a different certificate for tokens.
  # If not specified, server certificate is used.
  # certificate: "..."
  # key: "..."

# Authentication methods. All are tried, any one returning success is sufficient.
# At least one must be configured.

# Static user map.
users:
  # Password is specified as a BCrypt hash. Use htpasswd -B to generate.
<% @static_users.each do |login,password| -%>
  "<%= login %>":
    password: "<%= password %>"
<% end -%>
<% if @anonymous -%>
  "": {}  # Allow anonymous (no "docker login") access.
<% end -%>

# Google authentication.
# ==! NB: DO NOT ENTER YOUR GOOGLE PASSWORD AT "docker login". IT WILL NOT WORK.
# Instead, Auth server maintains a database of Google authentication tokens.
# Go to the server's port with you browser and follow the "Login with Google account" link.
# Once signed in, you will get a throw-away password which you can use for Docker login.
google_auth:
  domain: "<%= @oauth_domain %>"  # Optional. If set, only logins fromt his domain are accepted.
  # client_id and client_secret for API access. Required.
  # Follow instructions here: https://developers.google.com/identity/sign-in/web/devconsole-project
  # NB: Make sure JavaScript origins are configured correcly.
  client_id: "<%= @oauth_client_id %>"
  # Either client_secret or client_secret_file is required. Use client_secret_file if you don't
  # want to have sensitive information checked in.
  client_secret: "<%= @oauth_client_secret %>"
  # client_secret_file: "/etc/registry/client-secret.txt"
  # Where to store server tokens. Required.
  token_db: "/var/lib/docker-registry/google_tokens.ldb"
  # How long to wait when talking to Google servers. Optional.
  http_timeout: 10

# ACL specifies who can do what. If the match section of an entry matches the
# request, the set of actions will be compared and token will be issued if
# all the requested actions are allowed by the entry.
#  * It is possible to match on user's name ("account"), subject type ("type")
#    and name ("name"; for type=repository which, at the timeof writing, is the
#    only known subject type, this is the image name).
#  * Matches are evaluated as shell file name patterns ("globs") by default,
#    so "foobar", "f??bar", "f*bar" are all valid. For even more flexibility
#    match patterns can be evaluated as regexes by enclosing them in //, e.g.
#    "/(foo|bar)/".
#  * ACL is evaluated in the order it is defined until a match is found.
#  * Empty match clause matches anything, it only makes sense at the end of the
#    list and can be used as a way of specifying default permissions.
#  * Empty actions set means "deny everything", special set consisting of a
#    single "*" action means "allow everything".
#  * If no match is found the default is to deny the request.
acl:
<% @acls.each do |match,actions| -%>
  - match: {<%= match %>}
    actions: ["<%= actions %>"]
<% end -%>
